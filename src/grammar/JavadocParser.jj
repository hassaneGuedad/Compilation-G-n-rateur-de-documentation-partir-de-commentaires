/**
 * Grammaire JavaCC pour le parsing des commentaires Javadoc
 */

options {
  STATIC = false;
}

PARSER_BEGIN(JavadocParser)

package grammar;

public class JavadocParser {
  public static void main(String args[]) throws ParseException {
    JavadocParser parser = new JavadocParser(System.in);
    parser.JavadocComment();
  }
}

PARSER_END(JavadocParser)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
  < JAVADOC_START: "/**" >
| < JAVADOC_END: "*/" >
| < ASTERISK: "*" >
| < AT: "@" >
| < PARAM: "param" >
| < RETURN: "return" >
| < THROWS: "throws" >
| < AUTHOR: "author" >
| < VERSION: "version" >
| < SINCE: "since" >
| < WORD: (["a"-"z","A"-"Z","0"-"9",",",".","-","_","!","?"," "])+ >
}

void JavadocComment() : {}
{
  <JAVADOC_START>
  Description()
  (Tag())*
  <JAVADOC_END>
  <EOF>
}

void Description() : {}
{
  (
    <ASTERISK>
    (<WORD>)*
  )*
}

void Tag() : {}
{
  <ASTERISK>
  <AT>
  (
    ParamTag()
  | ReturnTag()
  | ThrowsTag()
  | AuthorTag()
  | VersionTag()
  | SinceTag()
  )
}

void ParamTag() : {}
{
  <PARAM>
  <WORD>
  (<WORD>)*
}

void ReturnTag() : {}
{
  <RETURN>
  (<WORD>)*
}

void ThrowsTag() : {}
{
  <THROWS>
  <WORD>
  (<WORD>)*
}

void AuthorTag() : {}
{
  <AUTHOR>
  (<WORD>)*
}

void VersionTag() : {}
{
  <VERSION>
  (<WORD>)*
}

void SinceTag() : {}
{
  <SINCE>
  (<WORD>)*
}